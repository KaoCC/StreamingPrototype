// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace StreamingFormat {
class InitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Init> {
} _Init_default_instance_;
class DefaultPosDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DefaultPos> {
} _DefaultPos_default_instance_;
class CameraDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Camera> {
} _Camera_default_instance_;
class EditingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Editing> {
} _Editing_default_instance_;
class ControlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Control> {
} _Control_default_instance_;
class ImageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Image> {
} _Image_default_instance_;
class EndingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ending> {
} _Ending_default_instance_;
class StreamingMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamingMessage> {
} _StreamingMessage_default_instance_;

namespace protobuf_message_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, moduleid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultPos, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultPos, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultPos, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultPos, vx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultPos, vy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultPos, vz_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, serialnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, delta_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, delta_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, delta_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, delta_vx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, delta_vy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, delta_vz_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Editing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Editing, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Editing, screen_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Editing, screen_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, drop_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, save_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, change_scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, editingmsg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, serialnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, bytesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, imagedata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ending, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingMessage, initmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingMessage, defaultposmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingMessage, cameramsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingMessage, imagemsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingMessage, endingmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingMessage, controlmsg_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Init)},
  { 7, -1, sizeof(DefaultPos)},
  { 17, -1, sizeof(Camera)},
  { 28, -1, sizeof(Editing)},
  { 35, -1, sizeof(Control)},
  { 43, -1, sizeof(Image)},
  { 51, -1, sizeof(Ending)},
  { 55, -1, sizeof(StreamingMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Init_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DefaultPos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Camera_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Editing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Control_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Image_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ending_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamingMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _Init_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _DefaultPos_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Camera_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Editing_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Control_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Image_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Ending_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _StreamingMessage_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Init_default_instance_.DefaultConstruct();
  _DefaultPos_default_instance_.DefaultConstruct();
  _Camera_default_instance_.DefaultConstruct();
  _Editing_default_instance_.DefaultConstruct();
  _Control_default_instance_.DefaultConstruct();
  _Image_default_instance_.DefaultConstruct();
  _Ending_default_instance_.DefaultConstruct();
  _StreamingMessage_default_instance_.DefaultConstruct();
  _Control_default_instance_.get_mutable()->editingmsg_ = const_cast< ::StreamingFormat::Editing*>(
      ::StreamingFormat::Editing::internal_default_instance());
  _StreamingMessage_default_instance_.get_mutable()->initmsg_ = const_cast< ::StreamingFormat::Init*>(
      ::StreamingFormat::Init::internal_default_instance());
  _StreamingMessage_default_instance_.get_mutable()->defaultposmsg_ = const_cast< ::StreamingFormat::DefaultPos*>(
      ::StreamingFormat::DefaultPos::internal_default_instance());
  _StreamingMessage_default_instance_.get_mutable()->cameramsg_ = const_cast< ::StreamingFormat::Camera*>(
      ::StreamingFormat::Camera::internal_default_instance());
  _StreamingMessage_default_instance_.get_mutable()->imagemsg_ = const_cast< ::StreamingFormat::Image*>(
      ::StreamingFormat::Image::internal_default_instance());
  _StreamingMessage_default_instance_.get_mutable()->endingmsg_ = const_cast< ::StreamingFormat::Ending*>(
      ::StreamingFormat::Ending::internal_default_instance());
  _StreamingMessage_default_instance_.get_mutable()->controlmsg_ = const_cast< ::StreamingFormat::Control*>(
      ::StreamingFormat::Control::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rmessage.proto\022\017StreamingFormat\"7\n\004Init"
      "\022\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\020\n\010modul"
      "eID\030\004 \001(\r\"Q\n\nDefaultPos\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030"
      "\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\n\n\002vx\030\005 \001(\002\022\n\n\002vy\030\006 \001(\002"
      "\022\n\n\002vz\030\007 \001(\002\"\207\001\n\006Camera\022\024\n\014serialNumber\030"
      "\002 \001(\r\022\017\n\007delta_x\030\003 \001(\002\022\017\n\007delta_y\030\004 \001(\002\022"
      "\017\n\007delta_z\030\005 \001(\002\022\020\n\010delta_vx\030\006 \001(\002\022\020\n\010de"
      "lta_vy\030\007 \001(\002\022\020\n\010delta_vz\030\010 \001(\002\"Y\n\007Editin"
      "g\022*\n\002op\030\001 \001(\0162\036.StreamingFormat.EditOper"
      "ation\022\020\n\010screen_x\030\002 \001(\002\022\020\n\010screen_y\030\003 \001("
      "\002\"u\n\007Control\022\022\n\ndrop_index\030\001 \003(\r\022\022\n\nsave"
      "_frame\030\002 \001(\r\022\024\n\014change_scene\030\003 \001(\r\022,\n\ned"
      "itingMsg\030\004 \001(\0132\030.StreamingFormat.Editing"
      "\"R\n\005Image\022\024\n\014serialNumber\030\002 \001(\r\022\016\n\006statu"
      "s\030\003 \001(\r\022\020\n\010byteSize\030\004 \001(\r\022\021\n\timageData\030\005"
      " \001(\014\"\010\n\006Ending\"\312\002\n\020StreamingMessage\022*\n\004t"
      "ype\030\001 \001(\0162\034.StreamingFormat.MessageType\022"
      "&\n\007initMsg\030\002 \001(\0132\025.StreamingFormat.Init\022"
      "2\n\rdefaultPosMsg\030\003 \001(\0132\033.StreamingFormat"
      ".DefaultPos\022*\n\tcameraMsg\030\004 \001(\0132\027.Streami"
      "ngFormat.Camera\022(\n\010imageMsg\030\005 \001(\0132\026.Stre"
      "amingFormat.Image\022*\n\tendingMsg\030\006 \001(\0132\027.S"
      "treamingFormat.Ending\022,\n\ncontrolMsg\030\007 \001("
      "\0132\030.StreamingFormat.Control*m\n\013MessageTy"
      "pe\022\013\n\007MsgInit\020\000\022\021\n\rMsgDefaultPos\020\001\022\021\n\rMs"
      "gCameraInfo\020\002\022\014\n\010MsgImage\020\003\022\r\n\tMsgEnding"
      "\020\004\022\016\n\nMsgControl\020\005*2\n\rEditOperation\022\t\n\005S"
      "TART\020\000\022\n\n\006FINISH\020\001\022\n\n\006UPDATE\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1118);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_message_2eproto

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EditOperation_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[1];
}
bool EditOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Init::kWidthFieldNumber;
const int Init::kHeightFieldNumber;
const int Init::kModuleIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Init::Init()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:StreamingFormat.Init)
}
Init::Init(const Init& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&moduleid_) -
    reinterpret_cast<char*>(&width_) + sizeof(moduleid_));
  // @@protoc_insertion_point(copy_constructor:StreamingFormat.Init)
}

void Init::SharedCtor() {
  ::memset(&width_, 0, reinterpret_cast<char*>(&moduleid_) -
    reinterpret_cast<char*>(&width_) + sizeof(moduleid_));
  _cached_size_ = 0;
}

Init::~Init() {
  // @@protoc_insertion_point(destructor:StreamingFormat.Init)
  SharedDtor();
}

void Init::SharedDtor() {
}

void Init::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Init::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[0].descriptor;
}

const Init& Init::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Init* Init::New(::google::protobuf::Arena* arena) const {
  Init* n = new Init;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Init::Clear() {
// @@protoc_insertion_point(message_clear_start:StreamingFormat.Init)
  ::memset(&width_, 0, reinterpret_cast<char*>(&moduleid_) -
    reinterpret_cast<char*>(&width_) + sizeof(moduleid_));
}

bool Init::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StreamingFormat.Init)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 width = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 moduleID = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moduleid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StreamingFormat.Init)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StreamingFormat.Init)
  return false;
#undef DO_
}

void Init::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StreamingFormat.Init)
  // uint32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // uint32 moduleID = 4;
  if (this->moduleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->moduleid(), output);
  }

  // @@protoc_insertion_point(serialize_end:StreamingFormat.Init)
}

::google::protobuf::uint8* Init::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StreamingFormat.Init)
  // uint32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // uint32 moduleID = 4;
  if (this->moduleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->moduleid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:StreamingFormat.Init)
  return target;
}

size_t Init::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StreamingFormat.Init)
  size_t total_size = 0;

  // uint32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint32 moduleID = 4;
  if (this->moduleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->moduleid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Init::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StreamingFormat.Init)
  GOOGLE_DCHECK_NE(&from, this);
  const Init* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Init>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamingFormat.Init)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamingFormat.Init)
    MergeFrom(*source);
  }
}

void Init::MergeFrom(const Init& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StreamingFormat.Init)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.moduleid() != 0) {
    set_moduleid(from.moduleid());
  }
}

void Init::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StreamingFormat.Init)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Init::CopyFrom(const Init& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StreamingFormat.Init)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Init::IsInitialized() const {
  return true;
}

void Init::Swap(Init* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Init::InternalSwap(Init* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(moduleid_, other->moduleid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Init::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Init

// uint32 width = 2;
void Init::clear_width() {
  width_ = 0u;
}
::google::protobuf::uint32 Init::width() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Init.width)
  return width_;
}
void Init::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Init.width)
}

// uint32 height = 3;
void Init::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 Init::height() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Init.height)
  return height_;
}
void Init::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Init.height)
}

// uint32 moduleID = 4;
void Init::clear_moduleid() {
  moduleid_ = 0u;
}
::google::protobuf::uint32 Init::moduleid() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Init.moduleID)
  return moduleid_;
}
void Init::set_moduleid(::google::protobuf::uint32 value) {
  
  moduleid_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Init.moduleID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DefaultPos::kXFieldNumber;
const int DefaultPos::kYFieldNumber;
const int DefaultPos::kZFieldNumber;
const int DefaultPos::kVxFieldNumber;
const int DefaultPos::kVyFieldNumber;
const int DefaultPos::kVzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DefaultPos::DefaultPos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:StreamingFormat.DefaultPos)
}
DefaultPos::DefaultPos(const DefaultPos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&vz_) -
    reinterpret_cast<char*>(&x_) + sizeof(vz_));
  // @@protoc_insertion_point(copy_constructor:StreamingFormat.DefaultPos)
}

void DefaultPos::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&vz_) -
    reinterpret_cast<char*>(&x_) + sizeof(vz_));
  _cached_size_ = 0;
}

DefaultPos::~DefaultPos() {
  // @@protoc_insertion_point(destructor:StreamingFormat.DefaultPos)
  SharedDtor();
}

void DefaultPos::SharedDtor() {
}

void DefaultPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefaultPos::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[1].descriptor;
}

const DefaultPos& DefaultPos::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

DefaultPos* DefaultPos::New(::google::protobuf::Arena* arena) const {
  DefaultPos* n = new DefaultPos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DefaultPos::Clear() {
// @@protoc_insertion_point(message_clear_start:StreamingFormat.DefaultPos)
  ::memset(&x_, 0, reinterpret_cast<char*>(&vz_) -
    reinterpret_cast<char*>(&x_) + sizeof(vz_));
}

bool DefaultPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StreamingFormat.DefaultPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vx = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vy = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vz = 7;
      case 7: {
        if (tag == 61u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StreamingFormat.DefaultPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StreamingFormat.DefaultPos)
  return false;
#undef DO_
}

void DefaultPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StreamingFormat.DefaultPos)
  // float x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // float y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // float z = 4;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  // float vx = 5;
  if (this->vx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->vx(), output);
  }

  // float vy = 6;
  if (this->vy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vy(), output);
  }

  // float vz = 7;
  if (this->vz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->vz(), output);
  }

  // @@protoc_insertion_point(serialize_end:StreamingFormat.DefaultPos)
}

::google::protobuf::uint8* DefaultPos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StreamingFormat.DefaultPos)
  // float x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // float y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // float z = 4;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  // float vx = 5;
  if (this->vx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->vx(), target);
  }

  // float vy = 6;
  if (this->vy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vy(), target);
  }

  // float vz = 7;
  if (this->vz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->vz(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:StreamingFormat.DefaultPos)
  return target;
}

size_t DefaultPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StreamingFormat.DefaultPos)
  size_t total_size = 0;

  // float x = 2;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // float vx = 5;
  if (this->vx() != 0) {
    total_size += 1 + 4;
  }

  // float vy = 6;
  if (this->vy() != 0) {
    total_size += 1 + 4;
  }

  // float vz = 7;
  if (this->vz() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefaultPos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StreamingFormat.DefaultPos)
  GOOGLE_DCHECK_NE(&from, this);
  const DefaultPos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DefaultPos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamingFormat.DefaultPos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamingFormat.DefaultPos)
    MergeFrom(*source);
  }
}

void DefaultPos::MergeFrom(const DefaultPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StreamingFormat.DefaultPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.vx() != 0) {
    set_vx(from.vx());
  }
  if (from.vy() != 0) {
    set_vy(from.vy());
  }
  if (from.vz() != 0) {
    set_vz(from.vz());
  }
}

void DefaultPos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StreamingFormat.DefaultPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultPos::CopyFrom(const DefaultPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StreamingFormat.DefaultPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultPos::IsInitialized() const {
  return true;
}

void DefaultPos::Swap(DefaultPos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DefaultPos::InternalSwap(DefaultPos* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(vx_, other->vx_);
  std::swap(vy_, other->vy_);
  std::swap(vz_, other->vz_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DefaultPos::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DefaultPos

// float x = 2;
void DefaultPos::clear_x() {
  x_ = 0;
}
float DefaultPos::x() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.DefaultPos.x)
  return x_;
}
void DefaultPos::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.DefaultPos.x)
}

// float y = 3;
void DefaultPos::clear_y() {
  y_ = 0;
}
float DefaultPos::y() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.DefaultPos.y)
  return y_;
}
void DefaultPos::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.DefaultPos.y)
}

// float z = 4;
void DefaultPos::clear_z() {
  z_ = 0;
}
float DefaultPos::z() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.DefaultPos.z)
  return z_;
}
void DefaultPos::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.DefaultPos.z)
}

// float vx = 5;
void DefaultPos::clear_vx() {
  vx_ = 0;
}
float DefaultPos::vx() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.DefaultPos.vx)
  return vx_;
}
void DefaultPos::set_vx(float value) {
  
  vx_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.DefaultPos.vx)
}

// float vy = 6;
void DefaultPos::clear_vy() {
  vy_ = 0;
}
float DefaultPos::vy() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.DefaultPos.vy)
  return vy_;
}
void DefaultPos::set_vy(float value) {
  
  vy_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.DefaultPos.vy)
}

// float vz = 7;
void DefaultPos::clear_vz() {
  vz_ = 0;
}
float DefaultPos::vz() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.DefaultPos.vz)
  return vz_;
}
void DefaultPos::set_vz(float value) {
  
  vz_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.DefaultPos.vz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Camera::kSerialNumberFieldNumber;
const int Camera::kDeltaXFieldNumber;
const int Camera::kDeltaYFieldNumber;
const int Camera::kDeltaZFieldNumber;
const int Camera::kDeltaVxFieldNumber;
const int Camera::kDeltaVyFieldNumber;
const int Camera::kDeltaVzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Camera::Camera()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:StreamingFormat.Camera)
}
Camera::Camera(const Camera& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&serialnumber_, &from.serialnumber_,
    reinterpret_cast<char*>(&delta_vz_) -
    reinterpret_cast<char*>(&serialnumber_) + sizeof(delta_vz_));
  // @@protoc_insertion_point(copy_constructor:StreamingFormat.Camera)
}

void Camera::SharedCtor() {
  ::memset(&serialnumber_, 0, reinterpret_cast<char*>(&delta_vz_) -
    reinterpret_cast<char*>(&serialnumber_) + sizeof(delta_vz_));
  _cached_size_ = 0;
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:StreamingFormat.Camera)
  SharedDtor();
}

void Camera::SharedDtor() {
}

void Camera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camera::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[2].descriptor;
}

const Camera& Camera::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Camera* Camera::New(::google::protobuf::Arena* arena) const {
  Camera* n = new Camera;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:StreamingFormat.Camera)
  ::memset(&serialnumber_, 0, reinterpret_cast<char*>(&delta_vz_) -
    reinterpret_cast<char*>(&serialnumber_) + sizeof(delta_vz_));
}

bool Camera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StreamingFormat.Camera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 serialNumber = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serialnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float delta_x = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float delta_y = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float delta_z = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float delta_vx = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float delta_vy = 7;
      case 7: {
        if (tag == 61u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float delta_vz = 8;
      case 8: {
        if (tag == 69u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_vz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StreamingFormat.Camera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StreamingFormat.Camera)
  return false;
#undef DO_
}

void Camera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StreamingFormat.Camera)
  // uint32 serialNumber = 2;
  if (this->serialnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serialnumber(), output);
  }

  // float delta_x = 3;
  if (this->delta_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->delta_x(), output);
  }

  // float delta_y = 4;
  if (this->delta_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->delta_y(), output);
  }

  // float delta_z = 5;
  if (this->delta_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->delta_z(), output);
  }

  // float delta_vx = 6;
  if (this->delta_vx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->delta_vx(), output);
  }

  // float delta_vy = 7;
  if (this->delta_vy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->delta_vy(), output);
  }

  // float delta_vz = 8;
  if (this->delta_vz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->delta_vz(), output);
  }

  // @@protoc_insertion_point(serialize_end:StreamingFormat.Camera)
}

::google::protobuf::uint8* Camera::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StreamingFormat.Camera)
  // uint32 serialNumber = 2;
  if (this->serialnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serialnumber(), target);
  }

  // float delta_x = 3;
  if (this->delta_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->delta_x(), target);
  }

  // float delta_y = 4;
  if (this->delta_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->delta_y(), target);
  }

  // float delta_z = 5;
  if (this->delta_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->delta_z(), target);
  }

  // float delta_vx = 6;
  if (this->delta_vx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->delta_vx(), target);
  }

  // float delta_vy = 7;
  if (this->delta_vy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->delta_vy(), target);
  }

  // float delta_vz = 8;
  if (this->delta_vz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->delta_vz(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:StreamingFormat.Camera)
  return target;
}

size_t Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StreamingFormat.Camera)
  size_t total_size = 0;

  // uint32 serialNumber = 2;
  if (this->serialnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serialnumber());
  }

  // float delta_x = 3;
  if (this->delta_x() != 0) {
    total_size += 1 + 4;
  }

  // float delta_y = 4;
  if (this->delta_y() != 0) {
    total_size += 1 + 4;
  }

  // float delta_z = 5;
  if (this->delta_z() != 0) {
    total_size += 1 + 4;
  }

  // float delta_vx = 6;
  if (this->delta_vx() != 0) {
    total_size += 1 + 4;
  }

  // float delta_vy = 7;
  if (this->delta_vy() != 0) {
    total_size += 1 + 4;
  }

  // float delta_vz = 8;
  if (this->delta_vz() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camera::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StreamingFormat.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  const Camera* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Camera>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamingFormat.Camera)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamingFormat.Camera)
    MergeFrom(*source);
  }
}

void Camera::MergeFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StreamingFormat.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.serialnumber() != 0) {
    set_serialnumber(from.serialnumber());
  }
  if (from.delta_x() != 0) {
    set_delta_x(from.delta_x());
  }
  if (from.delta_y() != 0) {
    set_delta_y(from.delta_y());
  }
  if (from.delta_z() != 0) {
    set_delta_z(from.delta_z());
  }
  if (from.delta_vx() != 0) {
    set_delta_vx(from.delta_vx());
  }
  if (from.delta_vy() != 0) {
    set_delta_vy(from.delta_vy());
  }
  if (from.delta_vz() != 0) {
    set_delta_vz(from.delta_vz());
  }
}

void Camera::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StreamingFormat.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera::CopyFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StreamingFormat.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  return true;
}

void Camera::Swap(Camera* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Camera::InternalSwap(Camera* other) {
  std::swap(serialnumber_, other->serialnumber_);
  std::swap(delta_x_, other->delta_x_);
  std::swap(delta_y_, other->delta_y_);
  std::swap(delta_z_, other->delta_z_);
  std::swap(delta_vx_, other->delta_vx_);
  std::swap(delta_vy_, other->delta_vy_);
  std::swap(delta_vz_, other->delta_vz_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Camera::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Camera

// uint32 serialNumber = 2;
void Camera::clear_serialnumber() {
  serialnumber_ = 0u;
}
::google::protobuf::uint32 Camera::serialnumber() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Camera.serialNumber)
  return serialnumber_;
}
void Camera::set_serialnumber(::google::protobuf::uint32 value) {
  
  serialnumber_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Camera.serialNumber)
}

// float delta_x = 3;
void Camera::clear_delta_x() {
  delta_x_ = 0;
}
float Camera::delta_x() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Camera.delta_x)
  return delta_x_;
}
void Camera::set_delta_x(float value) {
  
  delta_x_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Camera.delta_x)
}

// float delta_y = 4;
void Camera::clear_delta_y() {
  delta_y_ = 0;
}
float Camera::delta_y() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Camera.delta_y)
  return delta_y_;
}
void Camera::set_delta_y(float value) {
  
  delta_y_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Camera.delta_y)
}

// float delta_z = 5;
void Camera::clear_delta_z() {
  delta_z_ = 0;
}
float Camera::delta_z() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Camera.delta_z)
  return delta_z_;
}
void Camera::set_delta_z(float value) {
  
  delta_z_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Camera.delta_z)
}

// float delta_vx = 6;
void Camera::clear_delta_vx() {
  delta_vx_ = 0;
}
float Camera::delta_vx() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Camera.delta_vx)
  return delta_vx_;
}
void Camera::set_delta_vx(float value) {
  
  delta_vx_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Camera.delta_vx)
}

// float delta_vy = 7;
void Camera::clear_delta_vy() {
  delta_vy_ = 0;
}
float Camera::delta_vy() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Camera.delta_vy)
  return delta_vy_;
}
void Camera::set_delta_vy(float value) {
  
  delta_vy_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Camera.delta_vy)
}

// float delta_vz = 8;
void Camera::clear_delta_vz() {
  delta_vz_ = 0;
}
float Camera::delta_vz() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Camera.delta_vz)
  return delta_vz_;
}
void Camera::set_delta_vz(float value) {
  
  delta_vz_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Camera.delta_vz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Editing::kOpFieldNumber;
const int Editing::kScreenXFieldNumber;
const int Editing::kScreenYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Editing::Editing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:StreamingFormat.Editing)
}
Editing::Editing(const Editing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&op_, &from.op_,
    reinterpret_cast<char*>(&screen_y_) -
    reinterpret_cast<char*>(&op_) + sizeof(screen_y_));
  // @@protoc_insertion_point(copy_constructor:StreamingFormat.Editing)
}

void Editing::SharedCtor() {
  ::memset(&op_, 0, reinterpret_cast<char*>(&screen_y_) -
    reinterpret_cast<char*>(&op_) + sizeof(screen_y_));
  _cached_size_ = 0;
}

Editing::~Editing() {
  // @@protoc_insertion_point(destructor:StreamingFormat.Editing)
  SharedDtor();
}

void Editing::SharedDtor() {
}

void Editing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Editing::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[3].descriptor;
}

const Editing& Editing::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Editing* Editing::New(::google::protobuf::Arena* arena) const {
  Editing* n = new Editing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Editing::Clear() {
// @@protoc_insertion_point(message_clear_start:StreamingFormat.Editing)
  ::memset(&op_, 0, reinterpret_cast<char*>(&screen_y_) -
    reinterpret_cast<char*>(&op_) + sizeof(screen_y_));
}

bool Editing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StreamingFormat.Editing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .StreamingFormat.EditOperation op = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::StreamingFormat::EditOperation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float screen_x = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &screen_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float screen_y = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &screen_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StreamingFormat.Editing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StreamingFormat.Editing)
  return false;
#undef DO_
}

void Editing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StreamingFormat.Editing)
  // .StreamingFormat.EditOperation op = 1;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // float screen_x = 2;
  if (this->screen_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->screen_x(), output);
  }

  // float screen_y = 3;
  if (this->screen_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->screen_y(), output);
  }

  // @@protoc_insertion_point(serialize_end:StreamingFormat.Editing)
}

::google::protobuf::uint8* Editing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StreamingFormat.Editing)
  // .StreamingFormat.EditOperation op = 1;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // float screen_x = 2;
  if (this->screen_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->screen_x(), target);
  }

  // float screen_y = 3;
  if (this->screen_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->screen_y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:StreamingFormat.Editing)
  return target;
}

size_t Editing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StreamingFormat.Editing)
  size_t total_size = 0;

  // .StreamingFormat.EditOperation op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  // float screen_x = 2;
  if (this->screen_x() != 0) {
    total_size += 1 + 4;
  }

  // float screen_y = 3;
  if (this->screen_y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Editing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StreamingFormat.Editing)
  GOOGLE_DCHECK_NE(&from, this);
  const Editing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Editing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamingFormat.Editing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamingFormat.Editing)
    MergeFrom(*source);
  }
}

void Editing::MergeFrom(const Editing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StreamingFormat.Editing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.op() != 0) {
    set_op(from.op());
  }
  if (from.screen_x() != 0) {
    set_screen_x(from.screen_x());
  }
  if (from.screen_y() != 0) {
    set_screen_y(from.screen_y());
  }
}

void Editing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StreamingFormat.Editing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Editing::CopyFrom(const Editing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StreamingFormat.Editing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Editing::IsInitialized() const {
  return true;
}

void Editing::Swap(Editing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Editing::InternalSwap(Editing* other) {
  std::swap(op_, other->op_);
  std::swap(screen_x_, other->screen_x_);
  std::swap(screen_y_, other->screen_y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Editing::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Editing

// .StreamingFormat.EditOperation op = 1;
void Editing::clear_op() {
  op_ = 0;
}
::StreamingFormat::EditOperation Editing::op() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Editing.op)
  return static_cast< ::StreamingFormat::EditOperation >(op_);
}
void Editing::set_op(::StreamingFormat::EditOperation value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Editing.op)
}

// float screen_x = 2;
void Editing::clear_screen_x() {
  screen_x_ = 0;
}
float Editing::screen_x() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Editing.screen_x)
  return screen_x_;
}
void Editing::set_screen_x(float value) {
  
  screen_x_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Editing.screen_x)
}

// float screen_y = 3;
void Editing::clear_screen_y() {
  screen_y_ = 0;
}
float Editing::screen_y() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Editing.screen_y)
  return screen_y_;
}
void Editing::set_screen_y(float value) {
  
  screen_y_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Editing.screen_y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Control::kDropIndexFieldNumber;
const int Control::kSaveFrameFieldNumber;
const int Control::kChangeSceneFieldNumber;
const int Control::kEditingMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Control::Control()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:StreamingFormat.Control)
}
Control::Control(const Control& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      drop_index_(from.drop_index_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_editingmsg()) {
    editingmsg_ = new ::StreamingFormat::Editing(*from.editingmsg_);
  } else {
    editingmsg_ = NULL;
  }
  ::memcpy(&save_frame_, &from.save_frame_,
    reinterpret_cast<char*>(&change_scene_) -
    reinterpret_cast<char*>(&save_frame_) + sizeof(change_scene_));
  // @@protoc_insertion_point(copy_constructor:StreamingFormat.Control)
}

void Control::SharedCtor() {
  ::memset(&editingmsg_, 0, reinterpret_cast<char*>(&change_scene_) -
    reinterpret_cast<char*>(&editingmsg_) + sizeof(change_scene_));
  _cached_size_ = 0;
}

Control::~Control() {
  // @@protoc_insertion_point(destructor:StreamingFormat.Control)
  SharedDtor();
}

void Control::SharedDtor() {
  if (this != internal_default_instance()) {
    delete editingmsg_;
  }
}

void Control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[4].descriptor;
}

const Control& Control::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Control* Control::New(::google::protobuf::Arena* arena) const {
  Control* n = new Control;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Control::Clear() {
// @@protoc_insertion_point(message_clear_start:StreamingFormat.Control)
  drop_index_.Clear();
  if (GetArenaNoVirtual() == NULL && editingmsg_ != NULL) {
    delete editingmsg_;
  }
  editingmsg_ = NULL;
  ::memset(&save_frame_, 0, reinterpret_cast<char*>(&change_scene_) -
    reinterpret_cast<char*>(&save_frame_) + sizeof(change_scene_));
}

bool Control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StreamingFormat.Control)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 drop_index = 1;
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_drop_index())));
        } else if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_drop_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 save_frame = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 change_scene = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .StreamingFormat.Editing editingMsg = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_editingmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StreamingFormat.Control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StreamingFormat.Control)
  return false;
#undef DO_
}

void Control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StreamingFormat.Control)
  // repeated uint32 drop_index = 1;
  if (this->drop_index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_drop_index_cached_byte_size_);
  }
  for (int i = 0; i < this->drop_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->drop_index(i), output);
  }

  // uint32 save_frame = 2;
  if (this->save_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->save_frame(), output);
  }

  // uint32 change_scene = 3;
  if (this->change_scene() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->change_scene(), output);
  }

  // .StreamingFormat.Editing editingMsg = 4;
  if (this->has_editingmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->editingmsg_, output);
  }

  // @@protoc_insertion_point(serialize_end:StreamingFormat.Control)
}

::google::protobuf::uint8* Control::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StreamingFormat.Control)
  // repeated uint32 drop_index = 1;
  if (this->drop_index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _drop_index_cached_byte_size_, target);
  }
  for (int i = 0; i < this->drop_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->drop_index(i), target);
  }

  // uint32 save_frame = 2;
  if (this->save_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->save_frame(), target);
  }

  // uint32 change_scene = 3;
  if (this->change_scene() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->change_scene(), target);
  }

  // .StreamingFormat.Editing editingMsg = 4;
  if (this->has_editingmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->editingmsg_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:StreamingFormat.Control)
  return target;
}

size_t Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StreamingFormat.Control)
  size_t total_size = 0;

  // repeated uint32 drop_index = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->drop_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _drop_index_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .StreamingFormat.Editing editingMsg = 4;
  if (this->has_editingmsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->editingmsg_);
  }

  // uint32 save_frame = 2;
  if (this->save_frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->save_frame());
  }

  // uint32 change_scene = 3;
  if (this->change_scene() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->change_scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StreamingFormat.Control)
  GOOGLE_DCHECK_NE(&from, this);
  const Control* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Control>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamingFormat.Control)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamingFormat.Control)
    MergeFrom(*source);
  }
}

void Control::MergeFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StreamingFormat.Control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  drop_index_.MergeFrom(from.drop_index_);
  if (from.has_editingmsg()) {
    mutable_editingmsg()->::StreamingFormat::Editing::MergeFrom(from.editingmsg());
  }
  if (from.save_frame() != 0) {
    set_save_frame(from.save_frame());
  }
  if (from.change_scene() != 0) {
    set_change_scene(from.change_scene());
  }
}

void Control::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StreamingFormat.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control::CopyFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StreamingFormat.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  return true;
}

void Control::Swap(Control* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Control::InternalSwap(Control* other) {
  drop_index_.UnsafeArenaSwap(&other->drop_index_);
  std::swap(editingmsg_, other->editingmsg_);
  std::swap(save_frame_, other->save_frame_);
  std::swap(change_scene_, other->change_scene_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Control::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Control

// repeated uint32 drop_index = 1;
int Control::drop_index_size() const {
  return drop_index_.size();
}
void Control::clear_drop_index() {
  drop_index_.Clear();
}
::google::protobuf::uint32 Control::drop_index(int index) const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Control.drop_index)
  return drop_index_.Get(index);
}
void Control::set_drop_index(int index, ::google::protobuf::uint32 value) {
  drop_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:StreamingFormat.Control.drop_index)
}
void Control::add_drop_index(::google::protobuf::uint32 value) {
  drop_index_.Add(value);
  // @@protoc_insertion_point(field_add:StreamingFormat.Control.drop_index)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Control::drop_index() const {
  // @@protoc_insertion_point(field_list:StreamingFormat.Control.drop_index)
  return drop_index_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Control::mutable_drop_index() {
  // @@protoc_insertion_point(field_mutable_list:StreamingFormat.Control.drop_index)
  return &drop_index_;
}

// uint32 save_frame = 2;
void Control::clear_save_frame() {
  save_frame_ = 0u;
}
::google::protobuf::uint32 Control::save_frame() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Control.save_frame)
  return save_frame_;
}
void Control::set_save_frame(::google::protobuf::uint32 value) {
  
  save_frame_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Control.save_frame)
}

// uint32 change_scene = 3;
void Control::clear_change_scene() {
  change_scene_ = 0u;
}
::google::protobuf::uint32 Control::change_scene() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Control.change_scene)
  return change_scene_;
}
void Control::set_change_scene(::google::protobuf::uint32 value) {
  
  change_scene_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Control.change_scene)
}

// .StreamingFormat.Editing editingMsg = 4;
bool Control::has_editingmsg() const {
  return this != internal_default_instance() && editingmsg_ != NULL;
}
void Control::clear_editingmsg() {
  if (GetArenaNoVirtual() == NULL && editingmsg_ != NULL) delete editingmsg_;
  editingmsg_ = NULL;
}
const ::StreamingFormat::Editing& Control::editingmsg() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Control.editingMsg)
  return editingmsg_ != NULL ? *editingmsg_
                         : *::StreamingFormat::Editing::internal_default_instance();
}
::StreamingFormat::Editing* Control::mutable_editingmsg() {
  
  if (editingmsg_ == NULL) {
    editingmsg_ = new ::StreamingFormat::Editing;
  }
  // @@protoc_insertion_point(field_mutable:StreamingFormat.Control.editingMsg)
  return editingmsg_;
}
::StreamingFormat::Editing* Control::release_editingmsg() {
  // @@protoc_insertion_point(field_release:StreamingFormat.Control.editingMsg)
  
  ::StreamingFormat::Editing* temp = editingmsg_;
  editingmsg_ = NULL;
  return temp;
}
void Control::set_allocated_editingmsg(::StreamingFormat::Editing* editingmsg) {
  delete editingmsg_;
  editingmsg_ = editingmsg;
  if (editingmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:StreamingFormat.Control.editingMsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kSerialNumberFieldNumber;
const int Image::kStatusFieldNumber;
const int Image::kByteSizeFieldNumber;
const int Image::kImageDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:StreamingFormat.Image)
}
Image::Image(const Image& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imagedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.imagedata().size() > 0) {
    imagedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagedata_);
  }
  ::memcpy(&serialnumber_, &from.serialnumber_,
    reinterpret_cast<char*>(&bytesize_) -
    reinterpret_cast<char*>(&serialnumber_) + sizeof(bytesize_));
  // @@protoc_insertion_point(copy_constructor:StreamingFormat.Image)
}

void Image::SharedCtor() {
  imagedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serialnumber_, 0, reinterpret_cast<char*>(&bytesize_) -
    reinterpret_cast<char*>(&serialnumber_) + sizeof(bytesize_));
  _cached_size_ = 0;
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:StreamingFormat.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  imagedata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[5].descriptor;
}

const Image& Image::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Image* Image::New(::google::protobuf::Arena* arena) const {
  Image* n = new Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:StreamingFormat.Image)
  imagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serialnumber_, 0, reinterpret_cast<char*>(&bytesize_) -
    reinterpret_cast<char*>(&serialnumber_) + sizeof(bytesize_));
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StreamingFormat.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 serialNumber = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serialnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 status = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 byteSize = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes imageData = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StreamingFormat.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StreamingFormat.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StreamingFormat.Image)
  // uint32 serialNumber = 2;
  if (this->serialnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serialnumber(), output);
  }

  // uint32 status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // uint32 byteSize = 4;
  if (this->bytesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bytesize(), output);
  }

  // bytes imageData = 5;
  if (this->imagedata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->imagedata(), output);
  }

  // @@protoc_insertion_point(serialize_end:StreamingFormat.Image)
}

::google::protobuf::uint8* Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StreamingFormat.Image)
  // uint32 serialNumber = 2;
  if (this->serialnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serialnumber(), target);
  }

  // uint32 status = 3;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // uint32 byteSize = 4;
  if (this->bytesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bytesize(), target);
  }

  // bytes imageData = 5;
  if (this->imagedata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->imagedata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:StreamingFormat.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StreamingFormat.Image)
  size_t total_size = 0;

  // bytes imageData = 5;
  if (this->imagedata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->imagedata());
  }

  // uint32 serialNumber = 2;
  if (this->serialnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serialnumber());
  }

  // uint32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // uint32 byteSize = 4;
  if (this->bytesize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytesize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StreamingFormat.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamingFormat.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamingFormat.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StreamingFormat.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.imagedata().size() > 0) {

    imagedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagedata_);
  }
  if (from.serialnumber() != 0) {
    set_serialnumber(from.serialnumber());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.bytesize() != 0) {
    set_bytesize(from.bytesize());
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StreamingFormat.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StreamingFormat.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  imagedata_.Swap(&other->imagedata_);
  std::swap(serialnumber_, other->serialnumber_);
  std::swap(status_, other->status_);
  std::swap(bytesize_, other->bytesize_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Image

// uint32 serialNumber = 2;
void Image::clear_serialnumber() {
  serialnumber_ = 0u;
}
::google::protobuf::uint32 Image::serialnumber() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Image.serialNumber)
  return serialnumber_;
}
void Image::set_serialnumber(::google::protobuf::uint32 value) {
  
  serialnumber_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Image.serialNumber)
}

// uint32 status = 3;
void Image::clear_status() {
  status_ = 0u;
}
::google::protobuf::uint32 Image::status() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Image.status)
  return status_;
}
void Image::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Image.status)
}

// uint32 byteSize = 4;
void Image::clear_bytesize() {
  bytesize_ = 0u;
}
::google::protobuf::uint32 Image::bytesize() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Image.byteSize)
  return bytesize_;
}
void Image::set_bytesize(::google::protobuf::uint32 value) {
  
  bytesize_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.Image.byteSize)
}

// bytes imageData = 5;
void Image::clear_imagedata() {
  imagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Image::imagedata() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.Image.imageData)
  return imagedata_.GetNoArena();
}
void Image::set_imagedata(const ::std::string& value) {
  
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamingFormat.Image.imageData)
}
#if LANG_CXX11
void Image::set_imagedata(::std::string&& value) {
  
  imagedata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamingFormat.Image.imageData)
}
#endif
void Image::set_imagedata(const char* value) {
  
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamingFormat.Image.imageData)
}
void Image::set_imagedata(const void* value, size_t size) {
  
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamingFormat.Image.imageData)
}
::std::string* Image::mutable_imagedata() {
  
  // @@protoc_insertion_point(field_mutable:StreamingFormat.Image.imageData)
  return imagedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Image::release_imagedata() {
  // @@protoc_insertion_point(field_release:StreamingFormat.Image.imageData)
  
  return imagedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Image::set_allocated_imagedata(::std::string* imagedata) {
  if (imagedata != NULL) {
    
  } else {
    
  }
  imagedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagedata);
  // @@protoc_insertion_point(field_set_allocated:StreamingFormat.Image.imageData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ending::Ending()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:StreamingFormat.Ending)
}
Ending::Ending(const Ending& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StreamingFormat.Ending)
}

void Ending::SharedCtor() {
  _cached_size_ = 0;
}

Ending::~Ending() {
  // @@protoc_insertion_point(destructor:StreamingFormat.Ending)
  SharedDtor();
}

void Ending::SharedDtor() {
}

void Ending::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ending::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[6].descriptor;
}

const Ending& Ending::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ending* Ending::New(::google::protobuf::Arena* arena) const {
  Ending* n = new Ending;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ending::Clear() {
// @@protoc_insertion_point(message_clear_start:StreamingFormat.Ending)
}

bool Ending::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StreamingFormat.Ending)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:StreamingFormat.Ending)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StreamingFormat.Ending)
  return false;
#undef DO_
}

void Ending::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StreamingFormat.Ending)
  // @@protoc_insertion_point(serialize_end:StreamingFormat.Ending)
}

::google::protobuf::uint8* Ending::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StreamingFormat.Ending)
  // @@protoc_insertion_point(serialize_to_array_end:StreamingFormat.Ending)
  return target;
}

size_t Ending::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StreamingFormat.Ending)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ending::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StreamingFormat.Ending)
  GOOGLE_DCHECK_NE(&from, this);
  const Ending* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ending>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamingFormat.Ending)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamingFormat.Ending)
    MergeFrom(*source);
  }
}

void Ending::MergeFrom(const Ending& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StreamingFormat.Ending)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Ending::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StreamingFormat.Ending)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ending::CopyFrom(const Ending& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StreamingFormat.Ending)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ending::IsInitialized() const {
  return true;
}

void Ending::Swap(Ending* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ending::InternalSwap(Ending* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ending::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ending

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingMessage::kTypeFieldNumber;
const int StreamingMessage::kInitMsgFieldNumber;
const int StreamingMessage::kDefaultPosMsgFieldNumber;
const int StreamingMessage::kCameraMsgFieldNumber;
const int StreamingMessage::kImageMsgFieldNumber;
const int StreamingMessage::kEndingMsgFieldNumber;
const int StreamingMessage::kControlMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingMessage::StreamingMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:StreamingFormat.StreamingMessage)
}
StreamingMessage::StreamingMessage(const StreamingMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_initmsg()) {
    initmsg_ = new ::StreamingFormat::Init(*from.initmsg_);
  } else {
    initmsg_ = NULL;
  }
  if (from.has_defaultposmsg()) {
    defaultposmsg_ = new ::StreamingFormat::DefaultPos(*from.defaultposmsg_);
  } else {
    defaultposmsg_ = NULL;
  }
  if (from.has_cameramsg()) {
    cameramsg_ = new ::StreamingFormat::Camera(*from.cameramsg_);
  } else {
    cameramsg_ = NULL;
  }
  if (from.has_imagemsg()) {
    imagemsg_ = new ::StreamingFormat::Image(*from.imagemsg_);
  } else {
    imagemsg_ = NULL;
  }
  if (from.has_endingmsg()) {
    endingmsg_ = new ::StreamingFormat::Ending(*from.endingmsg_);
  } else {
    endingmsg_ = NULL;
  }
  if (from.has_controlmsg()) {
    controlmsg_ = new ::StreamingFormat::Control(*from.controlmsg_);
  } else {
    controlmsg_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:StreamingFormat.StreamingMessage)
}

void StreamingMessage::SharedCtor() {
  ::memset(&initmsg_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&initmsg_) + sizeof(type_));
  _cached_size_ = 0;
}

StreamingMessage::~StreamingMessage() {
  // @@protoc_insertion_point(destructor:StreamingFormat.StreamingMessage)
  SharedDtor();
}

void StreamingMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete initmsg_;
  }
  if (this != internal_default_instance()) {
    delete defaultposmsg_;
  }
  if (this != internal_default_instance()) {
    delete cameramsg_;
  }
  if (this != internal_default_instance()) {
    delete imagemsg_;
  }
  if (this != internal_default_instance()) {
    delete endingmsg_;
  }
  if (this != internal_default_instance()) {
    delete controlmsg_;
  }
}

void StreamingMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingMessage::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[7].descriptor;
}

const StreamingMessage& StreamingMessage::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamingMessage* StreamingMessage::New(::google::protobuf::Arena* arena) const {
  StreamingMessage* n = new StreamingMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StreamingFormat.StreamingMessage)
  if (GetArenaNoVirtual() == NULL && initmsg_ != NULL) {
    delete initmsg_;
  }
  initmsg_ = NULL;
  if (GetArenaNoVirtual() == NULL && defaultposmsg_ != NULL) {
    delete defaultposmsg_;
  }
  defaultposmsg_ = NULL;
  if (GetArenaNoVirtual() == NULL && cameramsg_ != NULL) {
    delete cameramsg_;
  }
  cameramsg_ = NULL;
  if (GetArenaNoVirtual() == NULL && imagemsg_ != NULL) {
    delete imagemsg_;
  }
  imagemsg_ = NULL;
  if (GetArenaNoVirtual() == NULL && endingmsg_ != NULL) {
    delete endingmsg_;
  }
  endingmsg_ = NULL;
  if (GetArenaNoVirtual() == NULL && controlmsg_ != NULL) {
    delete controlmsg_;
  }
  controlmsg_ = NULL;
  type_ = 0;
}

bool StreamingMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StreamingFormat.StreamingMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .StreamingFormat.MessageType type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::StreamingFormat::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .StreamingFormat.Init initMsg = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .StreamingFormat.DefaultPos defaultPosMsg = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defaultposmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .StreamingFormat.Camera cameraMsg = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameramsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .StreamingFormat.Image imageMsg = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagemsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .StreamingFormat.Ending endingMsg = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endingmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .StreamingFormat.Control controlMsg = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_controlmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StreamingFormat.StreamingMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StreamingFormat.StreamingMessage)
  return false;
#undef DO_
}

void StreamingMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StreamingFormat.StreamingMessage)
  // .StreamingFormat.MessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .StreamingFormat.Init initMsg = 2;
  if (this->has_initmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->initmsg_, output);
  }

  // .StreamingFormat.DefaultPos defaultPosMsg = 3;
  if (this->has_defaultposmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->defaultposmsg_, output);
  }

  // .StreamingFormat.Camera cameraMsg = 4;
  if (this->has_cameramsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->cameramsg_, output);
  }

  // .StreamingFormat.Image imageMsg = 5;
  if (this->has_imagemsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->imagemsg_, output);
  }

  // .StreamingFormat.Ending endingMsg = 6;
  if (this->has_endingmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->endingmsg_, output);
  }

  // .StreamingFormat.Control controlMsg = 7;
  if (this->has_controlmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->controlmsg_, output);
  }

  // @@protoc_insertion_point(serialize_end:StreamingFormat.StreamingMessage)
}

::google::protobuf::uint8* StreamingMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StreamingFormat.StreamingMessage)
  // .StreamingFormat.MessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .StreamingFormat.Init initMsg = 2;
  if (this->has_initmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->initmsg_, false, target);
  }

  // .StreamingFormat.DefaultPos defaultPosMsg = 3;
  if (this->has_defaultposmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->defaultposmsg_, false, target);
  }

  // .StreamingFormat.Camera cameraMsg = 4;
  if (this->has_cameramsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->cameramsg_, false, target);
  }

  // .StreamingFormat.Image imageMsg = 5;
  if (this->has_imagemsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->imagemsg_, false, target);
  }

  // .StreamingFormat.Ending endingMsg = 6;
  if (this->has_endingmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->endingmsg_, false, target);
  }

  // .StreamingFormat.Control controlMsg = 7;
  if (this->has_controlmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->controlmsg_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:StreamingFormat.StreamingMessage)
  return target;
}

size_t StreamingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StreamingFormat.StreamingMessage)
  size_t total_size = 0;

  // .StreamingFormat.Init initMsg = 2;
  if (this->has_initmsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->initmsg_);
  }

  // .StreamingFormat.DefaultPos defaultPosMsg = 3;
  if (this->has_defaultposmsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->defaultposmsg_);
  }

  // .StreamingFormat.Camera cameraMsg = 4;
  if (this->has_cameramsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cameramsg_);
  }

  // .StreamingFormat.Image imageMsg = 5;
  if (this->has_imagemsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imagemsg_);
  }

  // .StreamingFormat.Ending endingMsg = 6;
  if (this->has_endingmsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->endingmsg_);
  }

  // .StreamingFormat.Control controlMsg = 7;
  if (this->has_controlmsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->controlmsg_);
  }

  // .StreamingFormat.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StreamingFormat.StreamingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamingFormat.StreamingMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamingFormat.StreamingMessage)
    MergeFrom(*source);
  }
}

void StreamingMessage::MergeFrom(const StreamingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StreamingFormat.StreamingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_initmsg()) {
    mutable_initmsg()->::StreamingFormat::Init::MergeFrom(from.initmsg());
  }
  if (from.has_defaultposmsg()) {
    mutable_defaultposmsg()->::StreamingFormat::DefaultPos::MergeFrom(from.defaultposmsg());
  }
  if (from.has_cameramsg()) {
    mutable_cameramsg()->::StreamingFormat::Camera::MergeFrom(from.cameramsg());
  }
  if (from.has_imagemsg()) {
    mutable_imagemsg()->::StreamingFormat::Image::MergeFrom(from.imagemsg());
  }
  if (from.has_endingmsg()) {
    mutable_endingmsg()->::StreamingFormat::Ending::MergeFrom(from.endingmsg());
  }
  if (from.has_controlmsg()) {
    mutable_controlmsg()->::StreamingFormat::Control::MergeFrom(from.controlmsg());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void StreamingMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StreamingFormat.StreamingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingMessage::CopyFrom(const StreamingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StreamingFormat.StreamingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingMessage::IsInitialized() const {
  return true;
}

void StreamingMessage::Swap(StreamingMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamingMessage::InternalSwap(StreamingMessage* other) {
  std::swap(initmsg_, other->initmsg_);
  std::swap(defaultposmsg_, other->defaultposmsg_);
  std::swap(cameramsg_, other->cameramsg_);
  std::swap(imagemsg_, other->imagemsg_);
  std::swap(endingmsg_, other->endingmsg_);
  std::swap(controlmsg_, other->controlmsg_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamingMessage

// .StreamingFormat.MessageType type = 1;
void StreamingMessage::clear_type() {
  type_ = 0;
}
::StreamingFormat::MessageType StreamingMessage::type() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.StreamingMessage.type)
  return static_cast< ::StreamingFormat::MessageType >(type_);
}
void StreamingMessage::set_type(::StreamingFormat::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:StreamingFormat.StreamingMessage.type)
}

// .StreamingFormat.Init initMsg = 2;
bool StreamingMessage::has_initmsg() const {
  return this != internal_default_instance() && initmsg_ != NULL;
}
void StreamingMessage::clear_initmsg() {
  if (GetArenaNoVirtual() == NULL && initmsg_ != NULL) delete initmsg_;
  initmsg_ = NULL;
}
const ::StreamingFormat::Init& StreamingMessage::initmsg() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.StreamingMessage.initMsg)
  return initmsg_ != NULL ? *initmsg_
                         : *::StreamingFormat::Init::internal_default_instance();
}
::StreamingFormat::Init* StreamingMessage::mutable_initmsg() {
  
  if (initmsg_ == NULL) {
    initmsg_ = new ::StreamingFormat::Init;
  }
  // @@protoc_insertion_point(field_mutable:StreamingFormat.StreamingMessage.initMsg)
  return initmsg_;
}
::StreamingFormat::Init* StreamingMessage::release_initmsg() {
  // @@protoc_insertion_point(field_release:StreamingFormat.StreamingMessage.initMsg)
  
  ::StreamingFormat::Init* temp = initmsg_;
  initmsg_ = NULL;
  return temp;
}
void StreamingMessage::set_allocated_initmsg(::StreamingFormat::Init* initmsg) {
  delete initmsg_;
  initmsg_ = initmsg;
  if (initmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:StreamingFormat.StreamingMessage.initMsg)
}

// .StreamingFormat.DefaultPos defaultPosMsg = 3;
bool StreamingMessage::has_defaultposmsg() const {
  return this != internal_default_instance() && defaultposmsg_ != NULL;
}
void StreamingMessage::clear_defaultposmsg() {
  if (GetArenaNoVirtual() == NULL && defaultposmsg_ != NULL) delete defaultposmsg_;
  defaultposmsg_ = NULL;
}
const ::StreamingFormat::DefaultPos& StreamingMessage::defaultposmsg() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.StreamingMessage.defaultPosMsg)
  return defaultposmsg_ != NULL ? *defaultposmsg_
                         : *::StreamingFormat::DefaultPos::internal_default_instance();
}
::StreamingFormat::DefaultPos* StreamingMessage::mutable_defaultposmsg() {
  
  if (defaultposmsg_ == NULL) {
    defaultposmsg_ = new ::StreamingFormat::DefaultPos;
  }
  // @@protoc_insertion_point(field_mutable:StreamingFormat.StreamingMessage.defaultPosMsg)
  return defaultposmsg_;
}
::StreamingFormat::DefaultPos* StreamingMessage::release_defaultposmsg() {
  // @@protoc_insertion_point(field_release:StreamingFormat.StreamingMessage.defaultPosMsg)
  
  ::StreamingFormat::DefaultPos* temp = defaultposmsg_;
  defaultposmsg_ = NULL;
  return temp;
}
void StreamingMessage::set_allocated_defaultposmsg(::StreamingFormat::DefaultPos* defaultposmsg) {
  delete defaultposmsg_;
  defaultposmsg_ = defaultposmsg;
  if (defaultposmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:StreamingFormat.StreamingMessage.defaultPosMsg)
}

// .StreamingFormat.Camera cameraMsg = 4;
bool StreamingMessage::has_cameramsg() const {
  return this != internal_default_instance() && cameramsg_ != NULL;
}
void StreamingMessage::clear_cameramsg() {
  if (GetArenaNoVirtual() == NULL && cameramsg_ != NULL) delete cameramsg_;
  cameramsg_ = NULL;
}
const ::StreamingFormat::Camera& StreamingMessage::cameramsg() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.StreamingMessage.cameraMsg)
  return cameramsg_ != NULL ? *cameramsg_
                         : *::StreamingFormat::Camera::internal_default_instance();
}
::StreamingFormat::Camera* StreamingMessage::mutable_cameramsg() {
  
  if (cameramsg_ == NULL) {
    cameramsg_ = new ::StreamingFormat::Camera;
  }
  // @@protoc_insertion_point(field_mutable:StreamingFormat.StreamingMessage.cameraMsg)
  return cameramsg_;
}
::StreamingFormat::Camera* StreamingMessage::release_cameramsg() {
  // @@protoc_insertion_point(field_release:StreamingFormat.StreamingMessage.cameraMsg)
  
  ::StreamingFormat::Camera* temp = cameramsg_;
  cameramsg_ = NULL;
  return temp;
}
void StreamingMessage::set_allocated_cameramsg(::StreamingFormat::Camera* cameramsg) {
  delete cameramsg_;
  cameramsg_ = cameramsg;
  if (cameramsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:StreamingFormat.StreamingMessage.cameraMsg)
}

// .StreamingFormat.Image imageMsg = 5;
bool StreamingMessage::has_imagemsg() const {
  return this != internal_default_instance() && imagemsg_ != NULL;
}
void StreamingMessage::clear_imagemsg() {
  if (GetArenaNoVirtual() == NULL && imagemsg_ != NULL) delete imagemsg_;
  imagemsg_ = NULL;
}
const ::StreamingFormat::Image& StreamingMessage::imagemsg() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.StreamingMessage.imageMsg)
  return imagemsg_ != NULL ? *imagemsg_
                         : *::StreamingFormat::Image::internal_default_instance();
}
::StreamingFormat::Image* StreamingMessage::mutable_imagemsg() {
  
  if (imagemsg_ == NULL) {
    imagemsg_ = new ::StreamingFormat::Image;
  }
  // @@protoc_insertion_point(field_mutable:StreamingFormat.StreamingMessage.imageMsg)
  return imagemsg_;
}
::StreamingFormat::Image* StreamingMessage::release_imagemsg() {
  // @@protoc_insertion_point(field_release:StreamingFormat.StreamingMessage.imageMsg)
  
  ::StreamingFormat::Image* temp = imagemsg_;
  imagemsg_ = NULL;
  return temp;
}
void StreamingMessage::set_allocated_imagemsg(::StreamingFormat::Image* imagemsg) {
  delete imagemsg_;
  imagemsg_ = imagemsg;
  if (imagemsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:StreamingFormat.StreamingMessage.imageMsg)
}

// .StreamingFormat.Ending endingMsg = 6;
bool StreamingMessage::has_endingmsg() const {
  return this != internal_default_instance() && endingmsg_ != NULL;
}
void StreamingMessage::clear_endingmsg() {
  if (GetArenaNoVirtual() == NULL && endingmsg_ != NULL) delete endingmsg_;
  endingmsg_ = NULL;
}
const ::StreamingFormat::Ending& StreamingMessage::endingmsg() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.StreamingMessage.endingMsg)
  return endingmsg_ != NULL ? *endingmsg_
                         : *::StreamingFormat::Ending::internal_default_instance();
}
::StreamingFormat::Ending* StreamingMessage::mutable_endingmsg() {
  
  if (endingmsg_ == NULL) {
    endingmsg_ = new ::StreamingFormat::Ending;
  }
  // @@protoc_insertion_point(field_mutable:StreamingFormat.StreamingMessage.endingMsg)
  return endingmsg_;
}
::StreamingFormat::Ending* StreamingMessage::release_endingmsg() {
  // @@protoc_insertion_point(field_release:StreamingFormat.StreamingMessage.endingMsg)
  
  ::StreamingFormat::Ending* temp = endingmsg_;
  endingmsg_ = NULL;
  return temp;
}
void StreamingMessage::set_allocated_endingmsg(::StreamingFormat::Ending* endingmsg) {
  delete endingmsg_;
  endingmsg_ = endingmsg;
  if (endingmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:StreamingFormat.StreamingMessage.endingMsg)
}

// .StreamingFormat.Control controlMsg = 7;
bool StreamingMessage::has_controlmsg() const {
  return this != internal_default_instance() && controlmsg_ != NULL;
}
void StreamingMessage::clear_controlmsg() {
  if (GetArenaNoVirtual() == NULL && controlmsg_ != NULL) delete controlmsg_;
  controlmsg_ = NULL;
}
const ::StreamingFormat::Control& StreamingMessage::controlmsg() const {
  // @@protoc_insertion_point(field_get:StreamingFormat.StreamingMessage.controlMsg)
  return controlmsg_ != NULL ? *controlmsg_
                         : *::StreamingFormat::Control::internal_default_instance();
}
::StreamingFormat::Control* StreamingMessage::mutable_controlmsg() {
  
  if (controlmsg_ == NULL) {
    controlmsg_ = new ::StreamingFormat::Control;
  }
  // @@protoc_insertion_point(field_mutable:StreamingFormat.StreamingMessage.controlMsg)
  return controlmsg_;
}
::StreamingFormat::Control* StreamingMessage::release_controlmsg() {
  // @@protoc_insertion_point(field_release:StreamingFormat.StreamingMessage.controlMsg)
  
  ::StreamingFormat::Control* temp = controlmsg_;
  controlmsg_ = NULL;
  return temp;
}
void StreamingMessage::set_allocated_controlmsg(::StreamingFormat::Control* controlmsg) {
  delete controlmsg_;
  controlmsg_ = controlmsg;
  if (controlmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:StreamingFormat.StreamingMessage.controlMsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace StreamingFormat

// @@protoc_insertion_point(global_scope)
